// <auto-generated />
using System;
using DnDApi.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DnDApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DnDApi.Database.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Address_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"), 1L, 1);

                    b.Property<int>("PostalCode")
                        .HasColumnType("int")
                        .HasColumnName("Postal_Code");

                    b.Property<int>("StreetId")
                        .HasColumnType("int")
                        .HasColumnName("Street_ID");

                    b.HasKey("AddressId");

                    b.HasIndex("StreetId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("DnDApi.Database.AuditLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Log_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"), 1L, 1);

                    b.Property<int>("AuditLogTypeId")
                        .HasColumnType("int")
                        .HasColumnName("AuditLogType_ID");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime");

                    b.Property<string>("UserId")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("User_ID");

                    b.HasKey("LogId")
                        .HasName("PK__AuditLog__2D26E7AE8379E6C4");

                    b.HasIndex("AuditLogTypeId");

                    b.ToTable("AuditLog");
                });

            modelBuilder.Entity("DnDApi.Database.AuditLogType", b =>
                {
                    b.Property<int>("AuditLogTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AuditLogType_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditLogTypeId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("AuditLogTypeId");

                    b.ToTable("AuditLogType");
                });

            modelBuilder.Entity("DnDApi.Database.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Booking_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"), 1L, 1);

                    b.Property<int>("BookingStatusId")
                        .HasColumnType("int")
                        .HasColumnName("BookingStatus_ID");

                    b.Property<int>("BookingTypeId")
                        .HasColumnType("int")
                        .HasColumnName("BookingType_ID");

                    b.Property<bool>("Canceled")
                        .HasColumnType("bit");

                    b.Property<int>("CecId")
                        .HasColumnType("int")
                        .HasColumnName("CEC_ID");

                    b.Property<bool?>("Fined")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<string>("Qrcode")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("QRCode");

                    b.Property<string>("SenderUserId")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("SenderUser_ID");

                    b.HasKey("BookingId");

                    b.HasIndex("BookingStatusId");

                    b.HasIndex("BookingTypeId");

                    b.HasIndex("CecId");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("DnDApi.Database.BookingCancellation", b =>
                {
                    b.Property<int>("BookingCancelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BookingCancel_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingCancelId"), 1L, 1);

                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("Booking_ID");

                    b.Property<DateTime?>("CancelledDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CancelledDescription")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasDefaultValueSql("('Not Cancelled')");

                    b.HasKey("BookingCancelId")
                        .HasName("PK__Booking___960AD4CB9B508B59");

                    b.HasIndex("BookingId");

                    b.ToTable("Booking_Cancellation");
                });

            modelBuilder.Entity("DnDApi.Database.BookingStatus", b =>
                {
                    b.Property<int>("BookingStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BookingStatus_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingStatusId"), 1L, 1);

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("BookingStatusId");

                    b.ToTable("Booking_Status");
                });

            modelBuilder.Entity("DnDApi.Database.BookingType", b =>
                {
                    b.Property<int>("BookingTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BookingType_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingTypeId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("BookingTypeId");

                    b.ToTable("Booking_Type");
                });

            modelBuilder.Entity("DnDApi.Database.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("City_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"), 1L, 1);

                    b.Property<string>("CityName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CityId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("DnDApi.Database.ClientEmployeeConnection", b =>
                {
                    b.Property<int>("CecId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CEC_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CecId"), 1L, 1);

                    b.Property<string>("ClientUserId")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ClientUser_ID");

                    b.Property<string>("UserId")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("User_ID");

                    b.HasKey("CecId")
                        .HasName("PK__Client_E__3DFE5BD1C4C7564E");

                    b.ToTable("Client_Employee_Connection");
                });

            modelBuilder.Entity("DnDApi.Database.ClientInformation", b =>
                {
                    b.Property<string>("ClientUserId")
                        .IsUnicode(false)
                        .HasColumnType("varchar(900)")
                        .HasColumnName("ClientUser_ID");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("Company_ID");

                    b.Property<int>("TitleId")
                        .HasColumnType("int")
                        .HasColumnName("Title_ID");

                    b.HasKey("ClientUserId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("TitleId");

                    b.ToTable("Client_Information");
                });

            modelBuilder.Entity("DnDApi.Database.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Comment_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"), 1L, 1);

                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("Booking_ID");

                    b.Property<string>("Comment1")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Comment");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("SenderUserId")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("SenderUser_ID");

                    b.HasKey("CommentId");

                    b.HasIndex("BookingId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("DnDApi.Database.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Company_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"), 1L, 1);

                    b.Property<bool?>("Activated")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(1)))");

                    b.Property<int>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("Address_ID");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CompanyId");

                    b.HasIndex("AddressId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("DnDApi.Database.Date", b =>
                {
                    b.Property<int>("ScheduleDateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ScheduleDate_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleDateId"), 1L, 1);

                    b.Property<DateTime?>("Date1")
                        .HasColumnType("date")
                        .HasColumnName("Date");

                    b.HasKey("ScheduleDateId")
                        .HasName("PK__Date__3B21CA9490B99B04");

                    b.ToTable("Date");
                });

            modelBuilder.Entity("DnDApi.Database.DateTimeDriverVehicle", b =>
                {
                    b.Property<int>("DateTimeDriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DateTimeDriver_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DateTimeDriverId"), 1L, 1);

                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("Booking_ID");

                    b.Property<int>("DriverStatusId")
                        .HasColumnType("int")
                        .HasColumnName("DriverStatus_ID");

                    b.Property<string>("DriverUserId")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("DriverUser_ID");

                    b.Property<int>("ScheduleDateId")
                        .HasColumnType("int")
                        .HasColumnName("ScheduleDate_ID");

                    b.Property<int>("ScheduleTimeId")
                        .HasColumnType("int")
                        .HasColumnName("ScheduleTime_ID");

                    b.HasKey("DateTimeDriverId")
                        .HasName("PK__Date_Tim__D31AB91B11339966");

                    b.HasIndex("BookingId");

                    b.HasIndex("DriverStatusId");

                    b.HasIndex("ScheduleDateId");

                    b.HasIndex("ScheduleTimeId");

                    b.ToTable("Date_Time_Driver_Vehicle");
                });

            modelBuilder.Entity("DnDApi.Database.DriverInformation", b =>
                {
                    b.Property<string>("DriverUserId")
                        .IsUnicode(false)
                        .HasColumnType("varchar(900)")
                        .HasColumnName("DriverUser_ID");

                    b.Property<int>("DriverRatingId")
                        .HasColumnType("int")
                        .HasColumnName("DriverRating_ID");

                    b.Property<int>("LicenseId")
                        .HasColumnType("int")
                        .HasColumnName("License_ID");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int")
                        .HasColumnName("Registration_ID");

                    b.HasKey("DriverUserId");

                    b.HasIndex("DriverRatingId");

                    b.HasIndex("LicenseId");

                    b.HasIndex("RegistrationId");

                    b.ToTable("Driver_Information");
                });

            modelBuilder.Entity("DnDApi.Database.DriverLocation", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Location_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"), 1L, 1);

                    b.Property<float>("Lat")
                        .HasColumnType("real")
                        .HasColumnName("Latitude");

                    b.Property<float>("Lng")
                        .HasColumnType("real")
                        .HasColumnName("Longitude");

                    b.HasKey("LocationId");

                    b.ToTable("Driver_Location");
                });

            modelBuilder.Entity("DnDApi.Database.DriverRating", b =>
                {
                    b.Property<int>("DriverRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DriverRating_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DriverRatingId"), 1L, 1);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("DriverUserId")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("DriverUser_ID");

                    b.Property<int>("RatingId")
                        .HasColumnType("int")
                        .HasColumnName("Rating_ID");

                    b.HasKey("DriverRatingId");

                    b.HasIndex("RatingId");

                    b.ToTable("Driver_Rating");
                });

            modelBuilder.Entity("DnDApi.Database.DriverStatus", b =>
                {
                    b.Property<int>("DriverStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DriverStatus_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DriverStatusId"), 1L, 1);

                    b.Property<bool?>("Availability")
                        .HasColumnType("bit");

                    b.HasKey("DriverStatusId");

                    b.ToTable("Driver_Status");
                });

            modelBuilder.Entity("DnDApi.Database.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Event_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("NumberOfEmployees")
                        .HasColumnType("int");

                    b.HasKey("EventId");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("DnDApi.Database.EventBooking", b =>
                {
                    b.Property<int>("EventBooking1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Event_Booking");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventBooking1"), 1L, 1);

                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("Booking_ID");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("Event_ID");

                    b.HasKey("EventBooking1")
                        .HasName("PK__Event_Bo__C55E437B7010C09F");

                    b.HasIndex("BookingId");

                    b.HasIndex("EventId");

                    b.ToTable("Event_Booking");
                });

            modelBuilder.Entity("DnDApi.Database.FuelPrice", b =>
                {
                    b.Property<int>("FuelPriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FuelPrice_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FuelPriceId"), 1L, 1);

                    b.Property<string>("DriverUserId")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("DriverUser_ID");

                    b.Property<string>("FuelSlip")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FuelSlip");

                    b.Property<double>("Litres")
                        .HasColumnType("float");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime?>("TimeStamp")
                        .HasColumnType("datetime");

                    b.HasKey("FuelPriceId");

                    b.ToTable("Fuel_Price");
                });

            modelBuilder.Entity("DnDApi.Database.Incident", b =>
                {
                    b.Property<int>("IncidentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Incident_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncidentId"), 1L, 1);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DriverUserId")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("DriverUser_ID");

                    b.Property<int>("IncidentStatusId")
                        .HasColumnType("int")
                        .HasColumnName("IncidentStatus_ID");

                    b.Property<string>("Location")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ResolveMethod")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IncidentId");

                    b.HasIndex("IncidentStatusId");

                    b.ToTable("Incident");
                });

            modelBuilder.Entity("DnDApi.Database.IncidentStatus", b =>
                {
                    b.Property<int>("IncidentStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IncidentStatus_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncidentStatusId"), 1L, 1);

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.HasKey("IncidentStatusId");

                    b.ToTable("Incident_Status");
                });

            modelBuilder.Entity("DnDApi.Database.Inspection", b =>
                {
                    b.Property<int>("InspectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Inspection_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InspectionId"), 1L, 1);

                    b.Property<string>("DriverUserId")
                        .IsRequired()
                        .HasMaxLength(900)
                        .IsUnicode(false)
                        .HasColumnType("varchar(900)")
                        .HasColumnName("DriverUser_ID");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("End_Date");

                    b.Property<string>("PostCarInspection")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("PostCar_Inspection");

                    b.Property<string>("PostCarNotes")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("PostCar_Notes");

                    b.Property<int?>("PostCarOdometer")
                        .HasColumnType("int")
                        .HasColumnName("PostCar_Odometer");

                    b.Property<bool?>("PostCarTyres")
                        .HasColumnType("bit")
                        .HasColumnName("PostCar_Tyres");

                    b.Property<string>("PreCarInspection")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("PreCar_Inspection");

                    b.Property<string>("PreCarNotes")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("PreCar_Notes");

                    b.Property<int>("PreCarOdometer")
                        .HasColumnType("int")
                        .HasColumnName("PreCar_Odometer");

                    b.Property<bool>("PreCarTyres")
                        .HasColumnType("bit")
                        .HasColumnName("PreCar_Tyres");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Start_Date");

                    b.HasKey("InspectionId");

                    b.ToTable("Inspection");
                });

            modelBuilder.Entity("DnDApi.Database.License", b =>
                {
                    b.Property<int>("LicenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("License_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LicenseId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("date")
                        .HasColumnName("Expiration_Date");

                    b.Property<int>("LicenseCodeId")
                        .HasColumnType("int")
                        .HasColumnName("LicenseCode_ID");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("License_Number");

                    b.HasKey("LicenseId");

                    b.HasIndex("LicenseCodeId");

                    b.ToTable("License");
                });

            modelBuilder.Entity("DnDApi.Database.LicenseCode", b =>
                {
                    b.Property<int>("LicenseCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LicenseCode_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LicenseCodeId"), 1L, 1);

                    b.Property<string>("LicenseCode1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LicenseCode");

                    b.HasKey("LicenseCodeId");

                    b.ToTable("License_Code");
                });

            modelBuilder.Entity("DnDApi.Database.Maintenance", b =>
                {
                    b.Property<int>("MaintenanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Maintenance_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaintenanceId"), 1L, 1);

                    b.Property<bool>("Confirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("MechanicId")
                        .HasColumnType("int")
                        .HasColumnName("Mechanic_ID");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int")
                        .HasColumnName("Registration_ID");

                    b.HasKey("MaintenanceId");

                    b.HasIndex("MechanicId");

                    b.HasIndex("RegistrationId");

                    b.ToTable("Maintenance");
                });

            modelBuilder.Entity("DnDApi.Database.Mechanic", b =>
                {
                    b.Property<int>("MechanicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Mechanic_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MechanicId"), 1L, 1);

                    b.Property<string>("MechanicEmail")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Mechanic_Email");

                    b.Property<string>("MechanicName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Mechanic_Name");

                    b.HasKey("MechanicId");

                    b.ToTable("Mechanic");
                });

            modelBuilder.Entity("DnDApi.Database.Parcel", b =>
                {
                    b.Property<int>("ParcelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Parcel_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParcelId"), 1L, 1);

                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("Booking_ID");

                    b.Property<int>("ParcelConId")
                        .HasColumnType("int")
                        .HasColumnName("ParcelCon_ID");

                    b.Property<int>("ParcelPriorityId")
                        .HasColumnType("int")
                        .HasColumnName("ParcelPriority_ID");

                    b.Property<int>("ParcelTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ParcelType_ID");

                    b.HasKey("ParcelId");

                    b.HasIndex("BookingId");

                    b.HasIndex("ParcelConId");

                    b.HasIndex("ParcelPriorityId");

                    b.HasIndex("ParcelTypeId");

                    b.ToTable("Parcel");
                });

            modelBuilder.Entity("DnDApi.Database.ParcelConfidentiality", b =>
                {
                    b.Property<int>("ParcelConId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ParcelCon_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParcelConId"), 1L, 1);

                    b.Property<string>("Confidentiality")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("ParcelConId")
                        .HasName("PK__Parcel_C__D749DB3F09EF375C");

                    b.ToTable("Parcel_Confidentiality");
                });

            modelBuilder.Entity("DnDApi.Database.ParcelPriority", b =>
                {
                    b.Property<int>("ParcelPriorityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ParcelPriority_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParcelPriorityId"), 1L, 1);

                    b.Property<string>("Priority")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("ParcelPriorityId");

                    b.ToTable("Parcel_Priority");
                });

            modelBuilder.Entity("DnDApi.Database.ParcelType", b =>
                {
                    b.Property<int>("ParcelTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ParcelType_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParcelTypeId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ParcelTypeId");

                    b.ToTable("Parcel_Type");
                });

            modelBuilder.Entity("DnDApi.Database.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Project_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("Company_ID");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProjectName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("ProjectId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("DnDApi.Database.Rating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Rating_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingId"), 1L, 1);

                    b.Property<double?>("Rating1")
                        .HasColumnType("float")
                        .HasColumnName("Rating");

                    b.HasKey("RatingId");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("DnDApi.Database.Settings", b =>
                {
                    b.Property<int>("SettingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Settings_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SettingsId"), 1L, 1);

                    b.Property<int>("LogoutTimer")
                        .HasColumnType("int");

                    b.HasKey("SettingsId")
                        .HasName("PK__Settings__BAEF734CC26FF472");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("DnDApi.Database.Street", b =>
                {
                    b.Property<int>("StreetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Street_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StreetId"), 1L, 1);

                    b.Property<string>("StreetName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("StreetNumber")
                        .HasColumnType("int");

                    b.Property<int>("SuburbId")
                        .HasColumnType("int")
                        .HasColumnName("Suburb_ID");

                    b.HasKey("StreetId");

                    b.HasIndex("SuburbId");

                    b.ToTable("Street");
                });

            modelBuilder.Entity("DnDApi.Database.Suburb", b =>
                {
                    b.Property<int>("SuburbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Suburb_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SuburbId"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("City_ID");

                    b.Property<string>("Suburb1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Suburb");

                    b.HasKey("SuburbId");

                    b.HasIndex("CityId");

                    b.ToTable("Suburb");
                });

            modelBuilder.Entity("DnDApi.Database.Time", b =>
                {
                    b.Property<int>("ScheduleTimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ScheduleTime_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleTimeId"), 1L, 1);

                    b.Property<string>("Time1")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Time");

                    b.HasKey("ScheduleTimeId")
                        .HasName("PK__Time__D2C6CFADC3AAA042");

                    b.ToTable("Time");
                });

            modelBuilder.Entity("DnDApi.Database.Title", b =>
                {
                    b.Property<int>("TitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Title_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TitleId"), 1L, 1);

                    b.Property<string>("Title1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Title");

                    b.HasKey("TitleId");

                    b.ToTable("Title");
                });

            modelBuilder.Entity("DnDApi.Database.Tracking", b =>
                {
                    b.Property<int>("TrackingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Tracking_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrackingId"), 1L, 1);

                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("Booking_ID");

                    b.Property<double?>("Distance")
                        .HasColumnType("float");

                    b.Property<string>("EndLocation")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("End_Location");

                    b.Property<string>("StartLocation")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Start_Location");

                    b.HasKey("TrackingId");

                    b.HasIndex("BookingId");

                    b.ToTable("Tracking");
                });

            modelBuilder.Entity("DnDApi.Database.Vehicle", b =>
                {
                    b.Property<int>("RegistrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Registration_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegistrationId"), 1L, 1);

                    b.Property<bool>("Activated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<bool>("Availability")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(1)))");

                    b.Property<string>("ManufacturedDate")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Manufactured_Date");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int")
                        .HasColumnName("Manufacturer_ID");

                    b.Property<int>("ModelId")
                        .HasColumnType("int")
                        .HasColumnName("Model_ID");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleClassId")
                        .HasColumnType("int")
                        .HasColumnName("VehicleClass_ID");

                    b.HasKey("RegistrationId")
                        .HasName("PK__Vehicle__80BC7A172F7E2E44");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("ModelId");

                    b.HasIndex("VehicleClassId");

                    b.ToTable("Vehicle");
                });

            modelBuilder.Entity("DnDApi.Database.VehicleClass", b =>
                {
                    b.Property<int>("VehicleClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VehicleClass_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleClassId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("VehicleClassId");

                    b.ToTable("Vehicle_Class");
                });

            modelBuilder.Entity("DnDApi.Database.VehicleManufacturer", b =>
                {
                    b.Property<int>("ManufacturerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Manufacturer_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManufacturerId"), 1L, 1);

                    b.Property<string>("ManufacturerCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Manufacturer_Code");

                    b.Property<string>("ManufacturerTitle")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Manufacturer_Title");

                    b.HasKey("ManufacturerId")
                        .HasName("PK__Vehicle___80009240F6E3377F");

                    b.ToTable("Vehicle_Manufacturer");
                });

            modelBuilder.Entity("DnDApi.Database.VehicleModel", b =>
                {
                    b.Property<int>("ModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Model_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModelId"), 1L, 1);

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int")
                        .HasColumnName("Manufacturer_ID");

                    b.Property<string>("ModelCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Model_Code");

                    b.Property<string>("ModelTitle")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Model_Title");

                    b.HasKey("ModelId")
                        .HasName("PK__Vehicle___1E82D1D3E95BD35A");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Vehicle_Model");
                });

            modelBuilder.Entity("DnDApi.ViewModels.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deactivated")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Profile_Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DnDApi.Database.Address", b =>
                {
                    b.HasOne("DnDApi.Database.Street", "Street")
                        .WithMany("Addresses")
                        .HasForeignKey("StreetId")
                        .IsRequired()
                        .HasConstraintName("FK__Address__Street___787EE5A0");

                    b.Navigation("Street");
                });

            modelBuilder.Entity("DnDApi.Database.AuditLog", b =>
                {
                    b.HasOne("DnDApi.Database.AuditLogType", "AuditLogType")
                        .WithMany("AuditLogs")
                        .HasForeignKey("AuditLogTypeId")
                        .IsRequired()
                        .HasConstraintName("FK__AuditLog__AuditL__778AC167");

                    b.Navigation("AuditLogType");
                });

            modelBuilder.Entity("DnDApi.Database.Booking", b =>
                {
                    b.HasOne("DnDApi.Database.BookingStatus", "BookingStatus")
                        .WithMany("Bookings")
                        .HasForeignKey("BookingStatusId")
                        .IsRequired()
                        .HasConstraintName("FK__Booking__Booking__7A672E12");

                    b.HasOne("DnDApi.Database.BookingType", "BookingType")
                        .WithMany("Bookings")
                        .HasForeignKey("BookingTypeId")
                        .IsRequired()
                        .HasConstraintName("FK__Booking__Booking__797309D9");

                    b.HasOne("DnDApi.Database.ClientEmployeeConnection", "Cec")
                        .WithMany("Bookings")
                        .HasForeignKey("CecId")
                        .IsRequired()
                        .HasConstraintName("FK__Booking__CEC_ID__7B5B524B");

                    b.Navigation("BookingStatus");

                    b.Navigation("BookingType");

                    b.Navigation("Cec");
                });

            modelBuilder.Entity("DnDApi.Database.BookingCancellation", b =>
                {
                    b.HasOne("DnDApi.Database.Booking", "Booking")
                        .WithMany("BookingCancellations")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK__Booking_C__Booki__7C4F7684");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("DnDApi.Database.ClientInformation", b =>
                {
                    b.HasOne("DnDApi.Database.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK__Client_In__Compa__7D439ABD");

                    b.HasOne("DnDApi.Database.Title", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId")
                        .IsRequired()
                        .HasConstraintName("FK__Client_In__Title__7E37BEF6");

                    b.Navigation("Company");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("DnDApi.Database.Comment", b =>
                {
                    b.HasOne("DnDApi.Database.Booking", "Booking")
                        .WithMany("Comments")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK__Comment__Booking__7F2BE32F");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("DnDApi.Database.Company", b =>
                {
                    b.HasOne("DnDApi.Database.Address", "Address")
                        .WithMany("Companies")
                        .HasForeignKey("AddressId")
                        .IsRequired()
                        .HasConstraintName("FK__Company__Address__00200768");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("DnDApi.Database.DateTimeDriverVehicle", b =>
                {
                    b.HasOne("DnDApi.Database.Booking", "Booking")
                        .WithMany("DateTimeDriverVehicles")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK__Date_Time__Booki__01142BA1");

                    b.HasOne("DnDApi.Database.DriverStatus", "DriverStatus")
                        .WithMany("DateTimeDriverVehicles")
                        .HasForeignKey("DriverStatusId")
                        .IsRequired()
                        .HasConstraintName("FK__Date_Time__Drive__02084FDA");

                    b.HasOne("DnDApi.Database.Date", "ScheduleDate")
                        .WithMany("DateTimeDriverVehicles")
                        .HasForeignKey("ScheduleDateId")
                        .IsRequired()
                        .HasConstraintName("FK__Date_Time__Sched__03F0984C");

                    b.HasOne("DnDApi.Database.Time", "ScheduleTime")
                        .WithMany("DateTimeDriverVehicles")
                        .HasForeignKey("ScheduleTimeId")
                        .IsRequired()
                        .HasConstraintName("FK__Date_Time__Sched__02FC7413");

                    b.Navigation("Booking");

                    b.Navigation("DriverStatus");

                    b.Navigation("ScheduleDate");

                    b.Navigation("ScheduleTime");
                });

            modelBuilder.Entity("DnDApi.Database.DriverInformation", b =>
                {
                    b.HasOne("DnDApi.Database.DriverRating", "DriverRating")
                        .WithMany()
                        .HasForeignKey("DriverRatingId")
                        .IsRequired()
                        .HasConstraintName("FK__Driver_In__Drive__05D8E0BE");

                    b.HasOne("DnDApi.Database.License", "License")
                        .WithMany()
                        .HasForeignKey("LicenseId")
                        .IsRequired()
                        .HasConstraintName("FK__Driver_In__Licen__04E4BC85");

                    b.HasOne("DnDApi.Database.Vehicle", "Registration")
                        .WithMany()
                        .HasForeignKey("RegistrationId")
                        .IsRequired()
                        .HasConstraintName("FK__Driver_In__Regis__06CD04F7");

                    b.Navigation("DriverRating");

                    b.Navigation("License");

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("DnDApi.Database.DriverRating", b =>
                {
                    b.HasOne("DnDApi.Database.Rating", "Rating")
                        .WithMany("DriverRatings")
                        .HasForeignKey("RatingId")
                        .IsRequired()
                        .HasConstraintName("FK__Driver_Ra__Ratin__07C12930");

                    b.Navigation("Rating");
                });

            modelBuilder.Entity("DnDApi.Database.EventBooking", b =>
                {
                    b.HasOne("DnDApi.Database.Booking", "Booking")
                        .WithMany("EventBookings")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK__Event_Boo__Booki__09A971A2");

                    b.HasOne("DnDApi.Database.Event", "Event")
                        .WithMany("EventBookings")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK__Event_Boo__Event__08B54D69");

                    b.Navigation("Booking");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("DnDApi.Database.Incident", b =>
                {
                    b.HasOne("DnDApi.Database.IncidentStatus", "IncidentStatus")
                        .WithMany("Incidents")
                        .HasForeignKey("IncidentStatusId")
                        .IsRequired()
                        .HasConstraintName("FK__Incident__Incide__0A9D95DB");

                    b.Navigation("IncidentStatus");
                });

            modelBuilder.Entity("DnDApi.Database.License", b =>
                {
                    b.HasOne("DnDApi.Database.LicenseCode", "LicenseCode")
                        .WithMany("Licenses")
                        .HasForeignKey("LicenseCodeId")
                        .IsRequired()
                        .HasConstraintName("FK__License__License__0B91BA14");

                    b.Navigation("LicenseCode");
                });

            modelBuilder.Entity("DnDApi.Database.Maintenance", b =>
                {
                    b.HasOne("DnDApi.Database.Mechanic", "Mechanic")
                        .WithMany("Maintenances")
                        .HasForeignKey("MechanicId")
                        .IsRequired()
                        .HasConstraintName("FK__Maintenan__Mecha__0D7A0286");

                    b.HasOne("DnDApi.Database.Vehicle", "Registration")
                        .WithMany("Maintenances")
                        .HasForeignKey("RegistrationId")
                        .IsRequired()
                        .HasConstraintName("FK__Maintenan__Regis__0C85DE4D");

                    b.Navigation("Mechanic");

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("DnDApi.Database.Parcel", b =>
                {
                    b.HasOne("DnDApi.Database.Booking", "Booking")
                        .WithMany("Parcels")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK__Parcel__Booking___114A936A");

                    b.HasOne("DnDApi.Database.ParcelConfidentiality", "ParcelCon")
                        .WithMany("Parcels")
                        .HasForeignKey("ParcelConId")
                        .IsRequired()
                        .HasConstraintName("FK__Parcel__ParcelCo__0E6E26BF");

                    b.HasOne("DnDApi.Database.ParcelPriority", "ParcelPriority")
                        .WithMany("Parcels")
                        .HasForeignKey("ParcelPriorityId")
                        .IsRequired()
                        .HasConstraintName("FK__Parcel__ParcelPr__0F624AF8");

                    b.HasOne("DnDApi.Database.ParcelType", "ParcelType")
                        .WithMany("Parcels")
                        .HasForeignKey("ParcelTypeId")
                        .IsRequired()
                        .HasConstraintName("FK__Parcel__ParcelTy__10566F31");

                    b.Navigation("Booking");

                    b.Navigation("ParcelCon");

                    b.Navigation("ParcelPriority");

                    b.Navigation("ParcelType");
                });

            modelBuilder.Entity("DnDApi.Database.Project", b =>
                {
                    b.HasOne("DnDApi.Database.Company", "Company")
                        .WithMany("Projects")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK__Project__Company__123EB7A3");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("DnDApi.Database.Street", b =>
                {
                    b.HasOne("DnDApi.Database.Suburb", "Suburb")
                        .WithMany("Streets")
                        .HasForeignKey("SuburbId")
                        .IsRequired()
                        .HasConstraintName("FK__Street__Suburb_I__1332DBDC");

                    b.Navigation("Suburb");
                });

            modelBuilder.Entity("DnDApi.Database.Suburb", b =>
                {
                    b.HasOne("DnDApi.Database.City", "City")
                        .WithMany("Suburbs")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("FK__Suburb__City_ID__14270015");

                    b.Navigation("City");
                });

            modelBuilder.Entity("DnDApi.Database.Tracking", b =>
                {
                    b.HasOne("DnDApi.Database.Booking", "Booking")
                        .WithMany("Trackings")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK__Tracking__Bookin__151B244E");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("DnDApi.Database.Vehicle", b =>
                {
                    b.HasOne("DnDApi.Database.VehicleManufacturer", "Manufacturer")
                        .WithMany("Vehicles")
                        .HasForeignKey("ManufacturerId")
                        .IsRequired()
                        .HasConstraintName("FK__Vehicle__Manufac__17036CC0");

                    b.HasOne("DnDApi.Database.VehicleModel", "Model")
                        .WithMany("Vehicles")
                        .HasForeignKey("ModelId")
                        .IsRequired()
                        .HasConstraintName("FK__Vehicle__Model_I__17F790F9");

                    b.HasOne("DnDApi.Database.VehicleClass", "VehicleClass")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleClassId")
                        .IsRequired()
                        .HasConstraintName("FK__Vehicle__Vehicle__160F4887");

                    b.Navigation("Manufacturer");

                    b.Navigation("Model");

                    b.Navigation("VehicleClass");
                });

            modelBuilder.Entity("DnDApi.Database.VehicleModel", b =>
                {
                    b.HasOne("DnDApi.Database.VehicleManufacturer", "Manufacturer")
                        .WithMany("VehicleModels")
                        .HasForeignKey("ManufacturerId")
                        .IsRequired()
                        .HasConstraintName("FK__Vehicle_M__Manuf__18EBB532");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DnDApi.ViewModels.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DnDApi.ViewModels.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDApi.ViewModels.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DnDApi.ViewModels.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DnDApi.Database.Address", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("DnDApi.Database.AuditLogType", b =>
                {
                    b.Navigation("AuditLogs");
                });

            modelBuilder.Entity("DnDApi.Database.Booking", b =>
                {
                    b.Navigation("BookingCancellations");

                    b.Navigation("Comments");

                    b.Navigation("DateTimeDriverVehicles");

                    b.Navigation("EventBookings");

                    b.Navigation("Parcels");

                    b.Navigation("Trackings");
                });

            modelBuilder.Entity("DnDApi.Database.BookingStatus", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("DnDApi.Database.BookingType", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("DnDApi.Database.City", b =>
                {
                    b.Navigation("Suburbs");
                });

            modelBuilder.Entity("DnDApi.Database.ClientEmployeeConnection", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("DnDApi.Database.Company", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("DnDApi.Database.Date", b =>
                {
                    b.Navigation("DateTimeDriverVehicles");
                });

            modelBuilder.Entity("DnDApi.Database.DriverStatus", b =>
                {
                    b.Navigation("DateTimeDriverVehicles");
                });

            modelBuilder.Entity("DnDApi.Database.Event", b =>
                {
                    b.Navigation("EventBookings");
                });

            modelBuilder.Entity("DnDApi.Database.IncidentStatus", b =>
                {
                    b.Navigation("Incidents");
                });

            modelBuilder.Entity("DnDApi.Database.LicenseCode", b =>
                {
                    b.Navigation("Licenses");
                });

            modelBuilder.Entity("DnDApi.Database.Mechanic", b =>
                {
                    b.Navigation("Maintenances");
                });

            modelBuilder.Entity("DnDApi.Database.ParcelConfidentiality", b =>
                {
                    b.Navigation("Parcels");
                });

            modelBuilder.Entity("DnDApi.Database.ParcelPriority", b =>
                {
                    b.Navigation("Parcels");
                });

            modelBuilder.Entity("DnDApi.Database.ParcelType", b =>
                {
                    b.Navigation("Parcels");
                });

            modelBuilder.Entity("DnDApi.Database.Rating", b =>
                {
                    b.Navigation("DriverRatings");
                });

            modelBuilder.Entity("DnDApi.Database.Street", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("DnDApi.Database.Suburb", b =>
                {
                    b.Navigation("Streets");
                });

            modelBuilder.Entity("DnDApi.Database.Time", b =>
                {
                    b.Navigation("DateTimeDriverVehicles");
                });

            modelBuilder.Entity("DnDApi.Database.Vehicle", b =>
                {
                    b.Navigation("Maintenances");
                });

            modelBuilder.Entity("DnDApi.Database.VehicleClass", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("DnDApi.Database.VehicleManufacturer", b =>
                {
                    b.Navigation("VehicleModels");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("DnDApi.Database.VehicleModel", b =>
                {
                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
